package ${package.Controller};

import springfox.documentation.annotations.ApiIgnore;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import ${package.Entity}.${entity};
import ${package.Service}.I${entity}Service;
import com.sccf.core.commons.constants.GlobalConstant;
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Api(value = "${table.entityPath}", tags = "${table.comment}")
@RestController
@RequestMapping("/${table.entityPath}")
public class ${table.controllerName} extends ${superControllerClass} {
    @Autowired private I${entity}Service ${table.entityPath}Service;

    /**
    * 通过ID查询
    *
    * @param id ID
    * @return ${entity}
    */
    @ApiOperation(value = "通过ID查询", notes = "通过ID查询${table.comment}")
    @ApiImplicitParam(name = "id", value = "Id", required = true, dataType = "String", paramType = "path")
    @GetMapping("/{id}")
    public RestResponse<${entity}> get(@PathVariable String id) {
        return wrap(${table.entityPath}Service.selectById(id));
    }


    /**
    * 分页查询信息
    *
    * @param params 分页对象
    * @return 分页对象
    */
    @ApiOperation(value = "分页查询", notes = "分页查询${table.comment}")
    @ApiImplicitParams(value = {
            @ApiImplicitParam(name = "page", value = "页号", paramType = "query", dataType = "int", defaultValue = GlobalConstant.DEFAULT_PAGE_NUMBER_STRING),
            @ApiImplicitParam(name = "limit", value = "每页显示条数", paramType = "query", dataType = "int", defaultValue = GlobalConstant.DEFAULT_PAGE_SIZE_STRING),
            @ApiImplicitParam(name = "orderByField", value = "排序字段", paramType = "query", dataType = "String"),
            @ApiImplicitParam(name = "isAsc", value = "是否为升序", paramType = "query", dataType = "Boolean"),
            #foreach($field in ${table.fields})
            @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", paramType = "query"),
            #end
    })
    @GetMapping("/page")
    public RestResponse<Page<${entity}>> page(@ApiIgnore @RequestParam Map<String, Object> params, @ApiIgnore ${entity} ${table.entityPath}) {
        return wrap(${table.entityPath}Service.selectPage(new Query<>(params), new EntityWrapper<>(${table.entityPath})));
    }

    /**
     * 添加
     * @param  ${table.entityPath}  实体
     * @return success/false
     */
    @ApiOperation(value = "添加", notes = "添加${table.comment}")
    @ApiImplicitParams(value = {
        #foreach($field in ${table.fields})
        @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", dataType = "String", paramType = "query"),
        #end
    })
    @PostMapping
    public RestResponse<Boolean> add(@ApiIgnore @RequestBody ${entity} ${table.entityPath}) {
        return wrap(${table.entityPath}Service.insert(${table.entityPath}));
    }

    /**
     * 删除
     * @param id ID
     * @return success/false
     */
    @ApiOperation(value = "删除", notes = "删除${table.comment}")
    @ApiImplicitParam(name = "id", value = "${table.comment}Id", required = true, dataType = "String", paramType = "path")
    @DeleteMapping("/{id}")
    public RestResponse<Boolean> delete(@PathVariable String id) {
        return wrap(${table.entityPath}Service.deleteById(id));
    }

    /**
     * 编辑
     * @param  ${table.entityPath}  实体
     * @return success/false
     */
    @ApiOperation(value = "编辑", notes = "编辑${table.comment}")
    @ApiImplicitParams(value = {
        #foreach($field in ${table.fields})
        @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", dataType = "String", paramType = "query"),
        #end
    })
    @PutMapping
    public RestResponse<Boolean> edit(@ApiIgnore @RequestBody ${entity} ${table.entityPath}) {
        return wrap(${table.entityPath}Service.updateById(${table.entityPath}));
    }
}
